version: 2.1
executors:
  python37_executor:
    environment:
      TZ: "Asia/Tokyo"
    docker:
      - image: circleci/python:3.7
  python36_executor:
    environment:
      TZ: "Asia/Tokyo"
    docker:
      - image: circleci/python:3.6
  python35_executor:
    environment:
      TZ: "Asia/Tokyo"
    docker:
      - image: circleci/python:3.5
  git_executor:
    environment:
      TZ: "Asia/Tokyo"
    docker:
      - image: alpine/git

commands:
  setup_hub:
    steps:
      - run:
          name: install hub
          command: |
            apk update && apk add --no-cache bash make go groff util-linux
            git clone https://github.com/github/hub
            cd hub
            make install prefix=/usr/local

jobs:
  unittest_by_multiple_python_versions:
    parameters:
      python-version:
        type: executor
    executor: << parameters.python-version >>
    steps:
    - checkout
    - run:
        name: install dependencies
        command: |
          python -m pip install --upgrade pip
          py_ver=`python -c 'import sys;p=sys.version.split(" ")[0].split(".");print(p[0]+"."+p[1])'`
          pipenv --python $py_ver
          pipfile_ver=${py_ver//./}
          cp cliboa/template/Pipfile.above"$pipfile_ver" Pipfile
          pipenv install .
          pipenv install --dev --skip-lock
    - run:
        name: execute flake8
        command: |
          pipenv run flake8
    - run:
        name: execute unittest and instrument coverage with << parameters.python-version >>
        command: |
          pipenv run coverage

  push_dev_branch: # push development branch to GitHub
    executor: git_executor
    steps:
      - checkout
      - setup_hub
      - add_ssh_keys:
          fingerprints:
            - "b3:b1:fb:ac:f6:45:cf:83:ef:bc:8b:a8:c3:2a:20:51"
      - run:
          name: push development branch to GitHub
          command: |
            cd cliboa
            git checkout development
            git remote add upstream git@github.com:BrainPad/cliboa.git
            git push upstream development -f
            hub pull-request -m "development->master" -b master

rollout_filter: &rollout_filter
  filters:
    branches:
      only:
        - development
  
workflows:
  build_and_deploy:
    jobs:
      - unittest_by_multiple_python_versions:
          matrix:
            parameters:
              python-version: [python37_executor, python36_executor, python35_executor]
      - push_dev_branch:
          <<: *rollout_filter
          requires:
            - unittest_by_multiple_python_versions
